Gaze-Based Authentication System
This project implements a gaze-based authentication system using facial recognition, gaze tracking, and a maze-based user interaction. It combines modern technologies to enhance user authentication security.

Features

â€¢Login System:

 â€¢Users can log in using their username and password.
 â€¢Facial recognition ensures the user's identity matches stored credentials.

â€¢Gaze Tracking:

 â€¢Users follow a maze path using their gaze.
 â€¢Authentication is granted based on successful gaze-path tracking.

â€¢Responsive Web Design:

 â€¢Intuitive and user-friendly web interfaces for login, gaze authentication, and success pages.

â€¢Security:

 â€¢Passwords stored securely (ensure to use hashing in production).
 â€¢Gaze-based authentication adds an extra layer of security.

â€¢Technologies Used
 â€¢Backend:

  â€¢Python
  â€¢Flask Framework

 â€¢Frontend:

  â€¢HTML5
  â€¢CSS3 (Responsive Design)
  â€¢JavaScript

 â€¢Gaze Tracking:

  â€¢GazeTracking Library
  â€¢OpenCV for webcam access

 â€¢Database:

  â€¢MySQL
 â€¢Other Tools:

  â€¢Face Recognition Library

Setup Instructions
Prerequisites
â€¢Python 3.7 or higher
â€¢MySQL Database
â€¢Web browser
â€¢Webcam

Installation Steps
 1. Clone the Repository
 2. Install Dependencies:
    â€¢pip install -r requirements.txt

 3. Set Up the Database:
    â€¢Create a MySQL database (e.g., user_auth).
    â€¢Import the schema:
      CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    face_data BLOB NOT NULL
     );

    â€¢Insert sample user credentials and face data.
 4. Run the Application:
    â€¢python app.py
 5. Access the Application:
    â€¢Open your browser and go to: http://127.0.0.1:5000


Project Structure
.
â”œâ”€â”€ app.py                 # Flask application logic
â”œâ”€â”€ gaze_tracking_module.py # Gaze tracking and maze generation
â”œâ”€â”€ templates/             # HTML templates
â”‚   â”œâ”€â”€ login.html
â”‚   â”œâ”€â”€ gaze_auth.html
â”‚   â””â”€â”€ success.html
â”œâ”€â”€ static/                # CSS, JavaScript, and other assets
â”œâ”€â”€ requirements.txt       # Python dependencies
â””â”€â”€ README.md              # Project documentation

Usage Instructions
 1. Login:
    â€¢Enter the username and password.
    â€¢Ensure your face is visible to the webcam for facial recognition.
 2. Gaze Authentication:
    â€¢Follow the maze path with your gaze.
    â€¢Click "Finish" when done.
 3. Authentication Outcome:
    â€¢Success: Redirected to the success page.
    â€¢Failure: Redirected to the login page to retry.

Customization
â€¢Threshold Adjustment:
 â€¢Modify the proximity threshold in gaze_tracking_module.py for more or less lenient gaze       matching.
â€¢Maze Complexity:
 â€¢Adjust the maze size in create_connected_maze_with_display(size=5) to generate simpler or more complex mazes.
â€¢Styling:
 â€¢Update CSS files in the static/ directory to customize the UI.

Known Issues
â€¢Ensure proper lighting for accurate gaze and facial recognition.
â€¢Webcam access may fail if permissions are not granted.


Future Enhancements
â€¢Multi-user support with real-time session management.
â€¢Integration with additional authentication factors.
â€¢Deployment on a production server with HTTPS.


Acknowledgments
â€¢GazeTracking Library
â€¢OpenCV
â€¢Flask

Enjoy using the Gaze-Based Authentication System! ðŸš€